package com.example.demo.service;

import com.baidu.aip.ocr.AipOcr;
import com.example.demo.DemoApplicationTests;
import com.example.demo.configuration.AipOcrConfig;
import com.example.demo.utils.ImageUtil;
import com.mysql.cj.util.Base64Decoder;
import org.apache.tomcat.util.codec.binary.Base64;
import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import javax.annotation.Resource;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

@RunWith(SpringRunner.class)
public class ExcelServiceTest extends DemoApplicationTests {
    @Autowired
    private ExcelService excelService;
    @Test
    public void test(){
//        String filePath = "C:\\Users\\zhuoguangjing\\Desktop\\uipathtest.xlsx";
////        excelService.excel2Table(filePath);
//
        String image = "";
        org.apache.tomcat.util.codec.binary.Base64 base64 = new Base64();
        byte[] decode = base64.decode(image);
        try {
            JSONObject jsonObject = AipOcrConfig.getInstance().basicGeneral(decode, null);
//            if (jsonObject!=null&&jsonObject.getJSONArray("words_result")!=null){
                JSONArray words_result = jsonObject.getJSONArray("words_result");
            System.out.println(words_result);
//                StringBuffer buffer = new StringBuffer();
//                for (int i = 0; i<words_result.length();i++){
//                    buffer.append(words_result.getString(i));
//                }
//                System.out.println(buffer);
//            }


        }catch (Exception e){
            e.printStackTrace();
        }

    }
}
