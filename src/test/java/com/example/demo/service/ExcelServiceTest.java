package com.example.demo.service;

import com.example.demo.DemoApplicationTests;
import com.example.demo.configuration.AipOcrConfig;
import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
public class ExcelServiceTest extends DemoApplicationTests {
    @Autowired
    private ExcelService excelService;

    @Test
    public void test() {
//        String filePath = "C:\\Users\\zhuoguangjing\\Desktop\\uipathtest.xlsx";
////        excelService.excel2Table(filePath);
//
        String image = "";
        try {
            JSONObject jsonObject = AipOcrConfig.getInstance().basicGeneral(image, null);
            System.out.println(jsonObject);
            if (jsonObject!=null && jsonObject.getString("error_msg")==null){
                JSONArray words_result = jsonObject.getJSONArray("words_result");
                StringBuffer buffer = new StringBuffer();
                for (int i = 0; i < words_result.length(); i++) {
                    buffer.append(words_result.getJSONObject(i).getString("words"));
                }
                System.out.println(buffer);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}
